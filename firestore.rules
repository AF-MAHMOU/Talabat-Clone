rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Allow each user to read/write their own user doc and subcollections
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      
      // Allow access to user's addresses subcollection
      match /addresses/{addressId} {
        allow read, write: if isOwner(userId);
      }
      
      // Allow access to user's payment methods subcollection
      match /payment_methods/{paymentId} {
        allow read, write: if isOwner(userId);
      }
    }

    // Allow users to read restaurants list, but only admins can write
    match /restaurants/{restaurantId} {
      allow read: if true;
      allow write: if isAuthenticated() && isAdmin();
    }

    // Allow users to read promotions, but only admins can write
    match /promotions/{promotionId} {
      allow read: if true;
      allow write: if isAuthenticated() && isAdmin();
    }

    // Allow each user to read/write their own orders
    match /orders/{orderId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Allow users to create help reports
    match /reports/{reportId} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && isAdmin();
    }
  }
} 